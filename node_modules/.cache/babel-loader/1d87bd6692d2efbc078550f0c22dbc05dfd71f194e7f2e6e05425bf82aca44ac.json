{"ast":null,"code":"var _jsxFileName = \"/Users/leunghochun/projects/dictation/src/Speech.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useSpeechSynthesis } from \"react-speech-kit\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport wordsJSON from \"./words.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Speech = () => {\n  _s();\n  const {\n    speak,\n    voices\n  } = useSpeechSynthesis();\n  const [voice, setVoice] = React.useState(0);\n  const [wordData, setWordData] = React.useState(wordsJSON);\n  const [wordList, setWordList] = React.useState({});\n  const [wordTested, setWordTested] = React.useState([]);\n  const [waitTime, setWaitTime] = React.useState(10);\n  const [repeatTime, setRepeatTime] = React.useState(2);\n  const [numberOfWord, setNumberOfWord] = React.useState(20);\n  const [progress, setProgress] = React.useState(0);\n  const [selectedGroup, setSelectedGroup] = React.useState(\"\");\n  const [timers, setTimers] = React.useState([]);\n  const getVoices = () => {\n    let list = [];\n    voices.forEach((voice, index) => {\n      if (voice.lang === \"en-US\" && list.length < 3) {\n        list.push({\n          name: voice.name,\n          value: index\n        });\n      }\n    });\n    return list;\n  };\n  const voiceList = getVoices();\n  const start = async batch => {\n    let wordsToBeTested = Object.keys(wordList[batch]);\n    wordsToBeTested.map(async (key, i) => {\n      timers.push(setTimeout(() => {\n        for (let j = 0; j < repeatTime; j++) {\n          setTimeout(() => {\n            speak({\n              text: key,\n              voice: voices[voice]\n            });\n            console.log(\"speak: \" + key + \" \" + new Date().toLocaleTimeString());\n          }, 2000 * j);\n        }\n        wordTested.push(key);\n        wordList[batch][key] = true;\n      }, waitTime * 1000 * i));\n    });\n  };\n  const stop = () => {\n    setProgress(0);\n    timers.forEach(timer => {\n      clearTimeout(timer);\n    });\n  };\n  const waitTimeSliderChange = e => {\n    setWaitTime(e.target.value);\n  };\n  const repeatSliderChange = e => {\n    setRepeatTime(e.target.value);\n  };\n  const numberOfWordSliderChange = e => {\n    setNumberOfWord(e.target.value);\n  };\n  const printWord = word => {\n    return /*#__PURE__*/_jsxDEV(Form.Label, {\n      className: \"word\",\n      children: wordList[word] ? word : \"\"\n    }, word, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this);\n  };\n  const batchSelected = batch => {\n    setSelectedGroup(batch);\n  };\n  const voiceChanged = selectedVoice => {\n    setVoice(selectedVoice);\n  };\n  const generateWordList = data => {\n    if (!data) return;\n    setWordList(oldWordList => {\n      let newWordList = {};\n      let isNew = Object.keys(oldWordList).length === 0;\n      // oldWordList = {};\n      for (let year in data) {\n        let array = [...data[year].words].sort(() => Math.random() - 0.5);\n        let i = 1;\n        while (array.length > 0) {\n          let key = i.toString();\n          newWordList[year + \"Batch\" + key] = {};\n          let batch = array.splice(0, numberOfWord);\n          batch.forEach(word => {\n            newWordList[year + \"Batch\" + key][word] = wordTested.includes(word);\n          });\n          //     if (isNew || !oldWordList[year + \"Batch\" + key][word]) {\n          //     }\n          // });\n\n          // array.splice(0, numberOfWord).forEach((word) => {\n          //     if (isNew || !oldWordList[year + \"Batch\" + key][word]) {\n          //         newWordList[year + \"Batch\" + key][word] = wordTested.includes(word);\n          //     }\n          // });\n          i++;\n        }\n      }\n      setSelectedGroup(Object.keys(newWordList)[0]);\n      console.log(newWordList);\n      return newWordList;\n    });\n  };\n  useEffect(() => {\n    generateWordList(wordData);\n  }, [wordData, numberOfWord]);\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    defaultActiveKey: ['1'],\n    alwaysOpen: true,\n    children: [/*#__PURE__*/_jsxDEV(Accordion.Item, {\n      eventKey: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\"Wait time (\", waitTime, \" seconds)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Range, {\n          value: waitTime,\n          onChange: waitTimeSliderChange,\n          min: \"5\",\n          max: \"30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\"Repeat (\", repeatTime, \" X)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Range, {\n          value: repeatTime,\n          onChange: repeatSliderChange,\n          min: \"1\",\n          max: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\"Number of words(\", numberOfWord, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Range, {\n          value: numberOfWord,\n          onChange: numberOfWordSliderChange,\n          min: \"5\",\n          max: \"30\",\n          step: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Voice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), voiceList.map(item => {\n          return /*#__PURE__*/_jsxDEV(Form.Check, {\n            value: item.value,\n            type: \"radio\",\n            label: item.name,\n            onChange: () => voiceChanged(item.value),\n            checked: item.value === voice\n          }, \"voice\" + item.name + item.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 36\n          }, this);\n        }), voice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Accordion.Item, {\n      eventKey: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n        children: \"Batches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          activeKey: \"#\" + selectedGroup,\n          children: Object.keys(wordList).map(batch => {\n            return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              action: true,\n              href: \"#\" + batch,\n              onClick: () => batchSelected(batch),\n              children: [Object.keys(wordList[batch]).map(word => {\n                return /*#__PURE__*/_jsxDEV(Form.Label, {\n                  className: wordList[batch][word] ? \"word word-tested\" : \"word\",\n                  children: [word, \" \"]\n                }, word, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 48\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"button bg-info\",\n                onClick: () => start(batch),\n                children: \" Start \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 37\n              }, this)]\n            }, batch, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Accordion.Item, {\n      eventKey: \"2\",\n      children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n        children: \"Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-container\",\n          children: [Object.keys(wordList).map(word => printWord(word)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-full-width\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              className: \"button\",\n              onClick: () => start(),\n              children: \" Start \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"button\",\n              onClick: () => stop(),\n              children: \" Stop \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(Speech, \"Xc+ublkXPnXsDUeYLlhv8nYqA8E=\", false, function () {\n  return [useSpeechSynthesis];\n});\n_c = Speech;\nexport default Speech;\nvar _c;\n$RefreshReg$(_c, \"Speech\");","map":{"version":3,"names":["React","useEffect","useSpeechSynthesis","Form","Button","Accordion","ProgressBar","ListGroup","wordsJSON","jsxDEV","_jsxDEV","Speech","_s","speak","voices","voice","setVoice","useState","wordData","setWordData","wordList","setWordList","wordTested","setWordTested","waitTime","setWaitTime","repeatTime","setRepeatTime","numberOfWord","setNumberOfWord","progress","setProgress","selectedGroup","setSelectedGroup","timers","setTimers","getVoices","list","forEach","index","lang","length","push","name","value","voiceList","start","batch","wordsToBeTested","Object","keys","map","key","i","setTimeout","j","text","console","log","Date","toLocaleTimeString","stop","timer","clearTimeout","waitTimeSliderChange","e","target","repeatSliderChange","numberOfWordSliderChange","printWord","word","Label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","batchSelected","voiceChanged","selectedVoice","generateWordList","data","oldWordList","newWordList","isNew","year","array","words","sort","Math","random","toString","splice","includes","defaultActiveKey","alwaysOpen","Item","eventKey","Header","Body","Range","onChange","min","max","step","item","Check","type","label","checked","activeKey","action","href","onClick","_c","$RefreshReg$"],"sources":["/Users/leunghochun/projects/dictation/src/Speech.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useSpeechSynthesis } from \"react-speech-kit\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport wordsJSON from \"./words.json\";\r\n\r\nconst Speech = () => {\r\n    const { speak, voices } = useSpeechSynthesis();\r\n    const [voice, setVoice] = React.useState(0);\r\n    const [wordData, setWordData] = React.useState(wordsJSON);\r\n    const [wordList, setWordList] = React.useState({});\r\n    const [wordTested, setWordTested] = React.useState([]);\r\n    const [waitTime, setWaitTime] = React.useState(10);\r\n    const [repeatTime, setRepeatTime] = React.useState(2);\r\n    const [numberOfWord, setNumberOfWord] = React.useState(20);\r\n    const [progress, setProgress] = React.useState(0);\r\n    const [selectedGroup, setSelectedGroup] = React.useState(\"\");\r\n    const [timers, setTimers] = React.useState([]);\r\n\r\n    const getVoices = () => {\r\n        let list = [];\r\n        voices.forEach((voice, index) => {\r\n            if (voice.lang === \"en-US\" && list.length < 3) {\r\n                list.push({ name: voice.name, value: index})\r\n            }\r\n        })\r\n        return list;\r\n    }\r\n    const voiceList = getVoices();\r\n\r\n    const start = async (batch) => {\r\n        let wordsToBeTested = Object.keys(wordList[batch]);\r\n        wordsToBeTested.map(async (key, i) => {\r\n            timers.push(setTimeout(() => {\r\n                    for(let j = 0; j<repeatTime; j++) {\r\n                        setTimeout(() => {\r\n                            speak({ text: key, voice: voices[voice]});\r\n                            console.log(\"speak: \" + key + \" \" + new Date().toLocaleTimeString());\r\n                        }, 2000 * j);\r\n                    }\r\n                    wordTested.push(key);\r\n                    wordList[batch][key] = true;\r\n                }, waitTime * 1000 * i)\r\n            );\r\n        })\r\n    }\r\n\r\n    const stop = () => {\r\n       setProgress(0);\r\n       timers.forEach(timer => {clearTimeout(timer)});\r\n    }\r\n    \r\n    const waitTimeSliderChange = (e) => {\r\n        setWaitTime(e.target.value);\r\n    };\r\n\r\n    const repeatSliderChange = (e) => {\r\n        setRepeatTime(e.target.value);\r\n    };\r\n    \r\n    const numberOfWordSliderChange = (e) => {\r\n        setNumberOfWord(e.target.value);\r\n    }\r\n    \r\n    const printWord = (word) => {\r\n        return <Form.Label className=\"word\" key={word}>{wordList[word] ? word: \"\"}</Form.Label> \r\n    }\r\n\r\n    const batchSelected = (batch) => {\r\n        setSelectedGroup(batch);\r\n    }\r\n\r\n    const voiceChanged = (selectedVoice) => {\r\n        setVoice(selectedVoice);\r\n    }\r\n\r\n    const generateWordList = (data) => {\r\n        if (!data) return;\r\n        setWordList((oldWordList) => {\r\n                let newWordList = {};\r\n                let isNew = Object.keys(oldWordList).length === 0;\r\n                // oldWordList = {};\r\n                for (let year in data) {\r\n                    let array = [...data[year].words].sort(() => Math.random() - 0.5);\r\n                    let i = 1;\r\n                    while (array.length > 0) {\r\n                        let key = i.toString();\r\n                        newWordList[year + \"Batch\" + key] = {};\r\n                        let batch = array.splice(0, numberOfWord);\r\n                        batch.forEach((word) => {\r\n                            newWordList[year + \"Batch\" + key][word] = wordTested.includes(word);\r\n                        })\r\n                        //     if (isNew || !oldWordList[year + \"Batch\" + key][word]) {\r\n                        //     }\r\n                        // });\r\n\r\n                        // array.splice(0, numberOfWord).forEach((word) => {\r\n                        //     if (isNew || !oldWordList[year + \"Batch\" + key][word]) {\r\n                        //         newWordList[year + \"Batch\" + key][word] = wordTested.includes(word);\r\n                        //     }\r\n                        // });\r\n                        i++;\r\n                    }\r\n                }\r\n                setSelectedGroup(Object.keys(newWordList)[0]);\r\n                console.log(newWordList);\r\n                return newWordList;\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        generateWordList(wordData);\r\n    }, [wordData, numberOfWord])\r\n\r\n    return (        \r\n        <Accordion defaultActiveKey={['1']} alwaysOpen>\r\n            <Accordion.Item eventKey=\"0\">\r\n                <Accordion.Header>Settings</Accordion.Header>\r\n                <Accordion.Body>\r\n                    <Form.Label>Wait time ({waitTime} seconds)</Form.Label>\r\n                    <Form.Range value={waitTime} onChange={waitTimeSliderChange} min=\"5\" max=\"30\" />\r\n                    <Form.Label>Repeat ({repeatTime} X)</Form.Label>\r\n                    <Form.Range value={repeatTime} onChange={repeatSliderChange} min=\"1\" max=\"3\" />\r\n                    <Form.Label>Number of words({numberOfWord})</Form.Label>\r\n                    <Form.Range value={numberOfWord} onChange={numberOfWordSliderChange} min=\"5\" max=\"30\" step=\"5\" />\r\n                    <Form.Label>Voice</Form.Label>\r\n                    {voiceList.map((item) => {\r\n                            return <Form.Check key={\"voice\" + item.name + item.value} value={item.value} type=\"radio\" label={item.name} onChange={() => voiceChanged(item.value)} checked={item.value === voice} />\r\n                        })\r\n                    }\r\n                    {voice}\r\n                </Accordion.Body> \r\n            </Accordion.Item>\r\n            <Accordion.Item eventKey=\"1\">\r\n                <Accordion.Header>Batches</Accordion.Header>\r\n                <Accordion.Body>\r\n                    <ListGroup activeKey={\"#\" + selectedGroup}>\r\n                        {Object.keys(wordList).map((batch) => {\r\n                            return (\r\n                                <ListGroup.Item key={batch} action href={\"#\" + batch} onClick={() => batchSelected(batch)}>\r\n                                    {Object.keys(wordList[batch]).map((word) => {\r\n                                        return <Form.Label className={wordList[batch][word] ? \"word word-tested\": \"word\"} key={word} >{word} </Form.Label>\r\n                                    })}\r\n                                    <br/>\r\n                                    <Button className=\"button bg-info\" onClick={() => start(batch)}> Start </Button>\r\n                                </ListGroup.Item>\r\n                            )\r\n                        })}\r\n                    </ListGroup>\r\n                </Accordion.Body> \r\n            </Accordion.Item>\r\n            <Accordion.Item eventKey=\"2\">\r\n                <Accordion.Header>Words</Accordion.Header>\r\n                <Accordion.Body>\r\n                    <div className=\"flex-container\">\r\n                        {Object.keys(wordList).map((word) => printWord(word))}\r\n                        <div className=\"flex-full-width\">\r\n                            <Button className=\"button\" onClick={() => start()}> Start </Button>\r\n                            <Button className=\"button\" onClick={() => stop()}> Stop </Button>\r\n                        </div>\r\n                    </div>\r\n                </Accordion.Body> \r\n            </Accordion.Item>\r\n        </Accordion>\r\n    );\r\n};\r\nexport default Speech;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}